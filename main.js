!function(){"use strict";function e(e,t,s){return t in e?Object.defineProperty(e,t,{value:s,enumerable:!0,configurable:!0,writable:!0}):e[t]=s,e}let t={self:""};const s=document.querySelector(".profile__edit-button"),i=document.querySelector(".profile__add-btn"),n=document.querySelector(".profile__picture-button");const r="popup_active";class o{constructor(e){this._selector=e,this._modal=document.querySelector("".concat(this._selector)),this._handleEscKey=this._handleEscKey.bind(this),this._handleClosePopup=this._handleClosePopup.bind(this)}_handleEscKey(e){"Escape"===e.key&&this.close()}setEventListeners(){this._modal.addEventListener("mouseup",this._handleClosePopup)}_handleClosePopup(e){e.target.classList.contains(r)&&this.close(),e.target.classList.contains("popup__container-close")&&this.close()}open(){document.addEventListener("keyup",this._handleEscKey),this._modal.classList.add(r)}close(){document.removeEventListener("keyup",this._handleEscKey),this._modal.classList.remove(r)}}class a extends o{constructor(e){let{selector:t,handleSubmit:s,loadingBtnText:i}=e;super(t),this._handleSubmit=s,this._handleSubmit=this._handleSubmit.bind(this),this._handlerWithForm=this._handlerWithForm.bind(this),this._form=this._modal.querySelector(".popup-edit"),this._inputFields=[...this._form.querySelectorAll(".popup-edit__field")],this._submitBtn=this._modal.querySelector(".popup-edit__submit"),this._btnInitText=this._submitBtn.textContent,this._loadingBtnText=i}_getInputValues(){const e={};return this._inputFields.forEach((t=>{e[t.id]=t.value})),e}open(e){e&&this._setInputValues(e),super.open()}_setInputValues(e){this._inputFields.forEach((t=>{Object.keys(e).forEach((s=>{t.id===s&&(t.value=e[s])}))}))}_handlerWithForm(e){e.preventDefault(),this._handleSubmit(this._getInputValues())}showLoading(){this._submitBtn.textContent=this._loadingBtnText}hideLoading(){this._submitBtn.textContent=this._btnInitText}setEventListeners(){this._form.addEventListener("submit",this._handlerWithForm),super.setEventListeners()}close(){super.close(),setTimeout((()=>this._form.reset()),500)}}const h=new class{constructor(e){let{baseURL:t,headers:s}=e;var i,n;n=e=>e.ok?e.json():Promise.reject("Error: ".concat(e.statusText)),(i="_processResponse")in this?Object.defineProperty(this,i,{value:n,enumerable:!0,configurable:!0,writable:!0}):this[i]=n,this._baseURL=t,this._headers=s}getUserInfo(){return fetch("".concat(this._baseURL,"/users/me"),{headers:this._headers}).then((e=>this._processResponse(e)))}getInitialCards(){return fetch("".concat(this._baseURL,"/cards"),{headers:this._headers}).then((e=>this._processResponse(e)))}patchUserInfo(e){return fetch("".concat(this._baseURL,"users/me"),{headers:this._headers,method:"PATCH",body:JSON.stringify(e)}).then((e=>this._processResponse(e)))}postNewCard(e){return fetch("".concat(this._baseURL,"/cards"),{headers:this._headers,method:"POST",body:JSON.stringify(e)}).then((e=>this._processResponse(e)))}deleteCard(e){return fetch("".concat(this._baseURL,"/cards/").concat(e),{headers:this._headers,method:"DELETE"}).then((e=>this._processResponse(e)))}addLike(e){return fetch("".concat(this._baseURL,"cards/likes/").concat(e),{headers:this._headers,method:"PUT"}).then((e=>this._processResponse(e)))}removeLike(e){return fetch("".concat(this._baseURL,"cards/likes/").concat(e),{headers:this._headers,method:"DELETE"}).then((e=>this._processResponse(e)))}changeAvatar(e){return fetch("".concat(this._baseURL,"users/me/avatar"),{headers:this._headers,method:"PATCH",body:JSON.stringify({avatar:e})}).then((e=>this._processResponse(e)))}getInitialData(){return Promise.all([h.getUserInfo(),h.getInitialCards()])}}({baseURL:"https://around.nomoreparties.co/v1/cohort-3-en/",headers:{authorization:"".concat("a71d10a8-c3e4-4a43-bbbc-db81e488ab20"),"Content-Type":"application/json"}}),l=new class{constructor(e){let{renderer:t,selector:s}=e;this._renderer=t,this._container=document.querySelector(s)}addItem(e){const t=this._renderer(e);this._container.prepend(t)}_clear(){this._container.innerHTML=""}renderAll(e){this._clear(),this._renderItems=e,this._renderItems.forEach((e=>{this.addItem(e)}))}}({renderer:e=>function(e){const s=new class{constructor(e,t){let{data:s,handleImg:i,handleDel:n,handleLike:r}=e;this._name=s.name,this._src=s.link,this._likesCount=s.likes.length,this._id=s._id,this.ownerId=s.owner._id,this._selector=t,this._hanldeImgClick=i,this._handleDel=n,this._handleLikeBtn=r}_getTemplate(){const e=document.querySelector("".concat(this._selector)).content.cloneNode(!0);return this._img=e.querySelector(".card__img"),this._caption=e.querySelector(".card__caption"),this._trash=e.querySelector(".card__trash"),this._like=e.querySelector(".card__like-btn"),this._likes=e.querySelector(".card__like-counter"),e}makeCard(){return this._element=this._getTemplate().querySelector(".card"),this._img.setAttribute("src",this._src),this._img.setAttribute("alt",this._name),this._caption.textContent=this._name,this._likes.textContent=this._likesCount,this._addListeners(),t.self!=this.ownerId&&(this._trash.classList.add("trash_display-none"),this._trash.setAttribute("disabled","")),this._element.setAttribute("id",this._id),this._element}_addListeners(){this._like.addEventListener("click",(()=>this._handleLikeBtn())),this._img.addEventListener("click",(()=>this._hanldeImgClick({name:this._name,src:this._src}))),this._trash.addEventListener("click",(()=>this._handleDel(this._id)))}updateLikes(e){this._likesCount=e,this._renderLikes()}_isLiked(){return!(1==this._like.classList.length)}_renderLikes(){this._likes.textContent=this._likesCount,this._like.classList.toggle("card__like-btn_active")}remove(){this._element.remove()}}({data:e,handleImg:e=>{c.open(e)},handleDel:e=>{p.open(),p.setAction((()=>{h.deleteCard(e).then(s.remove()).catch((e=>console.log(e)))}))},handleLike:()=>{s._isLiked()?h.removeLike(s._id).then((e=>s.updateLikes(e.likes.length))).catch(console.error):h.addLike(s._id).then((e=>s.updateLikes(e.likes.length))).catch(console.error)}},"#card");return s.makeCard()}(e),selector:".gallery"}),c=new class extends o{constructor(e){super(e),this._image=this._modal.querySelector(".img-popout__img"),this._caption=this._modal.querySelector(".img-popout__caption")}open(e){this._image.src=e.src,this._image.alt=e.name,this._caption.textContent=e.name,super.open()}}("#imgPopup");c.setEventListeners();const d=new a({selector:"#avatar",handleSubmit:e=>{e=e.imageLink,d.showLoading(),h.changeAvatar(e).then((e=>{m.setUserInfo(e),d.close()})).catch((e=>console.log(e))).finally(d.hideLoading())},loadingBtnText:"Saving..."});d.setEventListeners();const _=new a({selector:"#profilePopup",handleSubmit:e=>{_.showLoading(),h.patchUserInfo(e).then((e=>{m.setUserInfo(e),_.close()})).catch((e=>console.log(e))).finally(_.hideLoading())},loadingBtnText:"Saving..."});_.setEventListeners();const u=new a({selector:"#addCardPopup",handleSubmit:e=>{u.showLoading(),h.postNewCard(e).then((e=>{l.addItem(e),u.close()})).catch((e=>console.log(e))).finally(u.hideLoading())},loadingBtnText:"Saving..."});u.setEventListeners();const p=new class extends o{setAction(e){this._handleSubmit=e}setEventListeners(){this._modal.querySelector(".popup-edit__submit").addEventListener("mouseup",(e=>{this._handleSubmit(e),this.close()})),super.setEventListeners()}}("#cardDelete");p.setEventListeners();const m=new class{constructor(e){this._nameSelector=e.nameSelector,this._jobSelector=e.jobSelector,this._nameNode=document.querySelector("".concat(this._nameSelector)),this._jobNode=document.querySelector("".concat(this._jobSelector)),this._pictureNode=document.querySelector(".profile__picture"),this.id=e._id,this._avatar=e.avatar}getUserInfo(){return this._name=this._nameNode.textContent,this._job=this._jobNode.textContent,{name:this._name,about:this._job}}setUserInfo(e){this._nameNode.textContent=e.name,this._jobNode.textContent=e.about,this.id=e._id,this.setUserAvatar(e.avatar)}getUserAvatar(){return this._avatar}setUserAvatar(e){this._pictureNode.src=e}}({nameSelector:".profile__user-name",jobSelector:".profile__user-about"}),b={};var g;g={formSelector:".popup-edit",inputSelector:".popup-edit__field",submitButtonSelector:".popup-edit__submit",inactiveButtonClass:"",inputErrorClass:"popup-edit__field_error",errorClass:"popup-edit__error-msg-inactive"},Array.from(document.querySelectorAll(g.formSelector)).forEach((t=>{const s=new class{constructor(t,s){e(this,"_hideOrShowError",(e=>{e.validity.valid?this._hideInputError(e):this._showInputError(e,e.validationMessage)})),e(this,"_showInputError",((e,t)=>{const s=this._formElement.querySelector("#".concat(e.getAttribute("name")));e.classList.add(this._settings.inputErrorClass),s.textContent=t,s.classList.remove(this._settings.errorClass)})),e(this,"_hideInputError",(e=>{const t=this._formElement.querySelector("#".concat(e.getAttribute("name")));e.classList.remove(this._settings.inputErrorClass),t.classList.add(this._settings.errorClass),t.textContent=""})),e(this,"_hasInvalidInput",(e=>e.some((e=>!e.validity.valid)))),this._settings=t,this._formElement=s,this._inputList=Array.from(this._formElement.querySelectorAll(this._settings.inputSelector)),this._btnElement=this._formElement.querySelector(this._settings.submitButtonSelector)}resetValidation(){this._toggleBtnState(),this._inputList.forEach((e=>{this._hideInputError(e)}))}enableValidation(){this._toggleBtnState(),this.resetValidation(),this._inputList.forEach((e=>{e.addEventListener("input",(()=>{this._hideOrShowError(e),this._toggleBtnState()}))}))}_toggleBtnState(){this._hasInvalidInput(this._inputList)?this._btnElement.setAttribute("disabled",""):this._btnElement.removeAttribute("disabled","")}}(g,t),i=t.getAttribute("name");b[i]=s,s.enableValidation()})),h.getInitialData().then((e=>{let[s,i]=e;m.setUserInfo(s),t.self=s._id,l.renderAll(i)})),n.addEventListener("click",(function(){d.open()})),s.addEventListener("click",(function(){const e=m.getUserInfo();_.open(e),b.editProfileForm.resetValidation()})),i.addEventListener("click",(function(){b.addCardForm.resetValidation(),u.open()}))}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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d2VicGFjazovL3dlYl9wcm9qZWN0XzQvLi9zcmMvc2NyaXB0cy91dGlscy9jb25zdGFudHMuanMiLCJ3ZWJwYWNrOi8vd2ViX3Byb2plY3RfNC8uL3NyYy9zY3JpcHRzL2NvbXBvbmVudHMvUG9wdXAuanMiLCJ3ZWJwYWNrOi8vd2ViX3Byb2plY3RfNC8uL3NyYy9zY3JpcHRzL2NvbXBvbmVudHMvUG9wdXBXaXRoRm9ybS5qcyIsIndlYnBhY2s6Ly93ZWJfcHJvamVjdF80Ly4vc3JjL3NjcmlwdHMvdXRpbHMvQXBpLmpzIiwid2VicGFjazovL3dlYl9wcm9qZWN0XzQvLi9zcmMvcGFnZS9pbmRleC5qcyIsIndlYnBhY2s6Ly93ZWJfcHJvamVjdF80Ly4vc3JjL3NjcmlwdHMvY29tcG9uZW50cy9TZWN0aW9uLmpzIiwid2VicGFjazovL3dlYl9wcm9qZWN0XzQvLi9zcmMvc2NyaXB0cy9jb21wb25lbnRzL0NhcmQuanMiLCJ3ZWJwYWNrOi8vd2ViX3Byb2plY3RfNC8uL3NyYy9zY3JpcHRzL2NvbXBvbmVudHMvUG9wdXBXaXRoSW1hZ2UuanMiLCJ3ZWJwYWNrOi8vd2ViX3Byb2plY3RfNC8uL3NyYy9zY3JpcHRzL2NvbXBvbmVudHMvV2FyblBvcHVwLmpzIiwid2VicGFjazovL3dlYl9wcm9qZWN0XzQvLi9zcmMvc2NyaXB0cy9jb21wb25lbnRzL1VzZXJJbmZvLmpzIiwid2VicGFjazovL3dlYl9wcm9qZWN0XzQvLi9zcmMvc2NyaXB0cy9jb21wb25lbnRzL0Zvcm1WYWxpZGF0b3IuanMiXSwic291cmNlc0NvbnRlbnQiOlsiY29uc3QgVE9LRU4gPSBcImE3MWQxMGE4LWMzZTQtNGE0My1iYmJjLWRiODFlNDg4YWIyMFwiO1xyXG5sZXQgTUVJRCA9IHtzZWxmOiAnJ307XHJcbmNvbnN0IGJ0bkVkaXRQcm9maWxlID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIi5wcm9maWxlX19lZGl0LWJ1dHRvblwiKTtcclxuY29uc3QgYnRuQWRkQ2FyZCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIucHJvZmlsZV9fYWRkLWJ0blwiKTtcclxuY29uc3QgYnRuUHJvZmlsZVBpY3R1cmUgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcucHJvZmlsZV9fcGljdHVyZS1idXR0b24nKTtcclxuY29uc3Qgc2V0dGluZ3MgPSB7XHJcbiAgZm9ybVNlbGVjdG9yOiBcIi5wb3B1cC1lZGl0XCIsXHJcbiAgaW5wdXRTZWxlY3RvcjogXCIucG9wdXAtZWRpdF9fZmllbGRcIixcclxuICBzdWJtaXRCdXR0b25TZWxlY3RvcjogXCIucG9wdXAtZWRpdF9fc3VibWl0XCIsXHJcbiAgaW5hY3RpdmVCdXR0b25DbGFzczogXCJcIixcclxuICBpbnB1dEVycm9yQ2xhc3M6IFwicG9wdXAtZWRpdF9fZmllbGRfZXJyb3JcIixcclxuICBlcnJvckNsYXNzOiBcInBvcHVwLWVkaXRfX2Vycm9yLW1zZy1pbmFjdGl2ZVwiLFxyXG59O1xyXG5cclxuZXhwb3J0IHsgYnRuRWRpdFByb2ZpbGUsIGJ0bkFkZENhcmQsIHNldHRpbmdzLCBUT0tFTiwgYnRuUHJvZmlsZVBpY3R1cmUsIE1FSUQgfTtcclxuIiwiY29uc3QgUE9QVVBfQUNUSVZFX0NMQVNTID0gXCJwb3B1cF9hY3RpdmVcIjtcclxuY29uc3QgUE9QVVBfQ0xPU0VfQlROX1NFTEVDVE9SID0gXCJwb3B1cF9fY29udGFpbmVyLWNsb3NlXCI7XHJcblxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBQb3B1cCB7XHJcbiAgY29uc3RydWN0b3Ioc2VsZWN0b3IpIHtcclxuICAgIHRoaXMuX3NlbGVjdG9yID0gc2VsZWN0b3I7XHJcbiAgICB0aGlzLl9tb2RhbCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoYCR7dGhpcy5fc2VsZWN0b3J9YCk7XHJcbiAgICB0aGlzLl9oYW5kbGVFc2NLZXkgPSB0aGlzLl9oYW5kbGVFc2NLZXkuYmluZCh0aGlzKTtcclxuICAgIHRoaXMuX2hhbmRsZUNsb3NlUG9wdXAgPSB0aGlzLl9oYW5kbGVDbG9zZVBvcHVwLmJpbmQodGhpcyk7XHJcbiAgfVxyXG5cclxuICBfaGFuZGxlRXNjS2V5KGV2dCkge1xyXG4gICAgaWYgKGV2dC5rZXkgPT09IFwiRXNjYXBlXCIpIHtcclxuICAgICAgdGhpcy5jbG9zZSgpO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgc2V0RXZlbnRMaXN0ZW5lcnMoKSB7XHJcbiAgICB0aGlzLl9tb2RhbC5hZGRFdmVudExpc3RlbmVyKFwibW91c2V1cFwiLCB0aGlzLl9oYW5kbGVDbG9zZVBvcHVwKTtcclxuICB9XHJcblxyXG4gIF9oYW5kbGVDbG9zZVBvcHVwKGV2dCkge1xyXG4gICAgaWYgKGV2dC50YXJnZXQuY2xhc3NMaXN0LmNvbnRhaW5zKFBPUFVQX0FDVElWRV9DTEFTUykpIHtcclxuICAgICAgdGhpcy5jbG9zZSgpO1xyXG4gICAgfVxyXG4gICAgaWYgKGV2dC50YXJnZXQuY2xhc3NMaXN0LmNvbnRhaW5zKFBPUFVQX0NMT1NFX0JUTl9TRUxFQ1RPUikpIHtcclxuICAgICAgdGhpcy5jbG9zZSgpO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgb3BlbigpIHtcclxuICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoXCJrZXl1cFwiLCB0aGlzLl9oYW5kbGVFc2NLZXkpO1xyXG4gICAgdGhpcy5fbW9kYWwuY2xhc3NMaXN0LmFkZChQT1BVUF9BQ1RJVkVfQ0xBU1MpO1xyXG4gIH1cclxuXHJcbiAgY2xvc2UoKSB7XHJcbiAgICBkb2N1bWVudC5yZW1vdmVFdmVudExpc3RlbmVyKFwia2V5dXBcIiwgdGhpcy5faGFuZGxlRXNjS2V5KTtcclxuICAgIHRoaXMuX21vZGFsLmNsYXNzTGlzdC5yZW1vdmUoUE9QVVBfQUNUSVZFX0NMQVNTKTtcclxuICB9XHJcbn1cclxuIiwiaW1wb3J0IFBvcHVwIGZyb20gXCIuL1BvcHVwLmpzXCI7XHJcblxyXG5jb25zdCBGT1JNX1NFTEVDVE9SID0gXCIucG9wdXAtZWRpdFwiO1xyXG5jb25zdCBGT1JNX0lOUFVUX0ZJRUxEX1NFTEVDVE9SID0gXCIucG9wdXAtZWRpdF9fZmllbGRcIjtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFBvcHVwV2l0aEZvcm0gZXh0ZW5kcyBQb3B1cCB7XHJcbiAgY29uc3RydWN0b3IoeyBzZWxlY3RvciwgaGFuZGxlU3VibWl0LCBsb2FkaW5nQnRuVGV4dCB9KSB7XHJcbiAgICBzdXBlcihzZWxlY3Rvcik7XHJcbiAgICB0aGlzLl9oYW5kbGVTdWJtaXQgPSBoYW5kbGVTdWJtaXQ7XHJcbiAgICB0aGlzLl9oYW5kbGVTdWJtaXQgPSB0aGlzLl9oYW5kbGVTdWJtaXQuYmluZCh0aGlzKTtcclxuICAgIHRoaXMuX2hhbmRsZXJXaXRoRm9ybSA9IHRoaXMuX2hhbmRsZXJXaXRoRm9ybS5iaW5kKHRoaXMpO1xyXG4gICAgdGhpcy5fZm9ybSA9IHRoaXMuX21vZGFsLnF1ZXJ5U2VsZWN0b3IoRk9STV9TRUxFQ1RPUik7XHJcbiAgICB0aGlzLl9pbnB1dEZpZWxkcyA9IFtcclxuICAgICAgLi4udGhpcy5fZm9ybS5xdWVyeVNlbGVjdG9yQWxsKEZPUk1fSU5QVVRfRklFTERfU0VMRUNUT1IpLFxyXG4gICAgXTtcclxuICAgIHRoaXMuX3N1Ym1pdEJ0biA9IHRoaXMuX21vZGFsLnF1ZXJ5U2VsZWN0b3IoXCIucG9wdXAtZWRpdF9fc3VibWl0XCIpO1xyXG4gICAgdGhpcy5fYnRuSW5pdFRleHQgPSB0aGlzLl9zdWJtaXRCdG4udGV4dENvbnRlbnQ7XHJcbiAgICB0aGlzLl9sb2FkaW5nQnRuVGV4dCA9IGxvYWRpbmdCdG5UZXh0O1xyXG4gIH1cclxuXHJcbiAgX2dldElucHV0VmFsdWVzKCkge1xyXG4gICAgY29uc3QgaW5wdXRWYWx1ZXMgPSB7fTtcclxuICAgIHRoaXMuX2lucHV0RmllbGRzLmZvckVhY2goKGZpZWxkKSA9PiB7XHJcbiAgICAgIGlucHV0VmFsdWVzW2ZpZWxkLmlkXSA9IGZpZWxkLnZhbHVlO1xyXG4gICAgfSk7XHJcbiAgICByZXR1cm4gaW5wdXRWYWx1ZXM7XHJcbiAgfVxyXG5cclxuICBvcGVuKGRhdGEpIHtcclxuICAgIGlmIChkYXRhKSB0aGlzLl9zZXRJbnB1dFZhbHVlcyhkYXRhKTtcclxuICAgIHN1cGVyLm9wZW4oKTtcclxuICB9XHJcblxyXG4gIF9zZXRJbnB1dFZhbHVlcyh2YWx1ZXMpIHtcclxuICAgIHRoaXMuX2lucHV0RmllbGRzLmZvckVhY2goKGZpZWxkKSA9PiB7XHJcbiAgICAgIE9iamVjdC5rZXlzKHZhbHVlcykuZm9yRWFjaCgoa2V5KSA9PiB7XHJcbiAgICAgICAgaWYgKGZpZWxkLmlkID09PSBrZXkpIHtcclxuICAgICAgICAgIGZpZWxkLnZhbHVlID0gdmFsdWVzW2tleV07XHJcbiAgICAgICAgfVxyXG4gICAgICB9KTtcclxuICAgIH0pO1xyXG4gIH1cclxuXHJcbiAgX2hhbmRsZXJXaXRoRm9ybShldnQpIHtcclxuICAgIHtcclxuICAgICAgZXZ0LnByZXZlbnREZWZhdWx0KCk7XHJcbiAgICAgIHRoaXMuX2hhbmRsZVN1Ym1pdCh0aGlzLl9nZXRJbnB1dFZhbHVlcygpKTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIHNob3dMb2FkaW5nKCkge1xyXG4gICAgdGhpcy5fc3VibWl0QnRuLnRleHRDb250ZW50ID0gdGhpcy5fbG9hZGluZ0J0blRleHQ7XHJcbiAgfVxyXG5cclxuICBoaWRlTG9hZGluZygpIHtcclxuICAgIHRoaXMuX3N1Ym1pdEJ0bi50ZXh0Q29udGVudCA9IHRoaXMuX2J0bkluaXRUZXh0O1xyXG4gIH1cclxuXHJcbiAgc2V0RXZlbnRMaXN0ZW5lcnMoKSB7XHJcbiAgICB0aGlzLl9mb3JtLmFkZEV2ZW50TGlzdGVuZXIoXCJzdWJtaXRcIiwgdGhpcy5faGFuZGxlcldpdGhGb3JtKTtcclxuICAgIHN1cGVyLnNldEV2ZW50TGlzdGVuZXJzKCk7XHJcbiAgfVxyXG5cclxuICBjbG9zZSgpIHtcclxuICAgIHN1cGVyLmNsb3NlKCk7XHJcbiAgICBzZXRUaW1lb3V0KCgpID0+IHRoaXMuX2Zvcm0ucmVzZXQoKSwgNTAwKTtcclxuICB9XHJcbn1cclxuIiwiaW1wb3J0IHsgVE9LRU4gfSBmcm9tIFwiLi9jb25zdGFudHMuanNcIjtcclxuXHJcbmNsYXNzIEFwaSB7XHJcbiAgY29uc3RydWN0b3IoeyBiYXNlVVJMLCBoZWFkZXJzIH0pIHtcclxuICAgIHRoaXMuX2Jhc2VVUkwgPSBiYXNlVVJMO1xyXG4gICAgdGhpcy5faGVhZGVycyA9IGhlYWRlcnM7XHJcbiAgfVxyXG5cclxuICBfcHJvY2Vzc1Jlc3BvbnNlID0gKHJlcykgPT4ge1xyXG4gICAgcmV0dXJuIHJlcy5vayA/IHJlcy5qc29uKCkgOiBQcm9taXNlLnJlamVjdChgRXJyb3I6ICR7cmVzLnN0YXR1c1RleHR9YCk7XHJcbiAgfTtcclxuXHJcbiAgZ2V0VXNlckluZm8oKSB7XHJcbiAgICByZXR1cm4gZmV0Y2goYCR7dGhpcy5fYmFzZVVSTH0vdXNlcnMvbWVgLCB7IGhlYWRlcnM6IHRoaXMuX2hlYWRlcnMgfSkudGhlbihcclxuICAgICAgKHJlcykgPT4gdGhpcy5fcHJvY2Vzc1Jlc3BvbnNlKHJlcylcclxuICAgICk7XHJcbiAgfVxyXG5cclxuICBnZXRJbml0aWFsQ2FyZHMoKSB7XHJcbiAgICByZXR1cm4gZmV0Y2goYCR7dGhpcy5fYmFzZVVSTH0vY2FyZHNgLCB7IGhlYWRlcnM6IHRoaXMuX2hlYWRlcnMgfSkudGhlbihcclxuICAgICAgKHJlcykgPT4gdGhpcy5fcHJvY2Vzc1Jlc3BvbnNlKHJlcylcclxuICAgICk7XHJcbiAgfVxyXG5cclxuICBwYXRjaFVzZXJJbmZvKGRhdGEpIHtcclxuICAgIHJldHVybiBmZXRjaChgJHt0aGlzLl9iYXNlVVJMfXVzZXJzL21lYCwge1xyXG4gICAgICBoZWFkZXJzOiB0aGlzLl9oZWFkZXJzLFxyXG4gICAgICBtZXRob2Q6IFwiUEFUQ0hcIixcclxuICAgICAgYm9keTogSlNPTi5zdHJpbmdpZnkoZGF0YSksXHJcbiAgICB9KS50aGVuKChyZXMpID0+IHRoaXMuX3Byb2Nlc3NSZXNwb25zZShyZXMpKTtcclxuICB9XHJcblxyXG4gIHBvc3ROZXdDYXJkKGRhdGEpIHtcclxuICAgIHJldHVybiBmZXRjaChgJHt0aGlzLl9iYXNlVVJMfS9jYXJkc2AsIHtcclxuICAgICAgaGVhZGVyczogdGhpcy5faGVhZGVycyxcclxuICAgICAgbWV0aG9kOiBcIlBPU1RcIixcclxuICAgICAgYm9keTogSlNPTi5zdHJpbmdpZnkoZGF0YSksXHJcbiAgICB9KS50aGVuKChyZXMpID0+IHRoaXMuX3Byb2Nlc3NSZXNwb25zZShyZXMpKTtcclxuICB9XHJcblxyXG4gIGRlbGV0ZUNhcmQoaWQpIHtcclxuICAgIHJldHVybiBmZXRjaChgJHt0aGlzLl9iYXNlVVJMfS9jYXJkcy8ke2lkfWAsIHtcclxuICAgICAgaGVhZGVyczogdGhpcy5faGVhZGVycyxcclxuICAgICAgbWV0aG9kOiBcIkRFTEVURVwiLFxyXG4gICAgfSkudGhlbigocmVzKSA9PiB0aGlzLl9wcm9jZXNzUmVzcG9uc2UocmVzKSk7XHJcbiAgfVxyXG5cclxuICBhZGRMaWtlKGlkKSB7XHJcbiAgICByZXR1cm4gZmV0Y2goYCR7dGhpcy5fYmFzZVVSTH1jYXJkcy9saWtlcy8ke2lkfWAsIHtcclxuICAgICAgaGVhZGVyczogdGhpcy5faGVhZGVycyxcclxuICAgICAgbWV0aG9kOiBcIlBVVFwiLFxyXG4gICAgfSkudGhlbigocmVzKSA9PiB0aGlzLl9wcm9jZXNzUmVzcG9uc2UocmVzKSk7XHJcbiAgfVxyXG5cclxuICByZW1vdmVMaWtlKGlkKSB7XHJcbiAgICByZXR1cm4gZmV0Y2goYCR7dGhpcy5fYmFzZVVSTH1jYXJkcy9saWtlcy8ke2lkfWAsIHtcclxuICAgICAgaGVhZGVyczogdGhpcy5faGVhZGVycyxcclxuICAgICAgbWV0aG9kOiBcIkRFTEVURVwiLFxyXG4gICAgfSkudGhlbigocmVzKSA9PiB0aGlzLl9wcm9jZXNzUmVzcG9uc2UocmVzKSk7XHJcbiAgfVxyXG5cclxuICBjaGFuZ2VBdmF0YXIoYXZhdGFyKSB7XHJcbiAgICByZXR1cm4gZmV0Y2goYCR7dGhpcy5fYmFzZVVSTH11c2Vycy9tZS9hdmF0YXJgLCB7XHJcbiAgICAgIGhlYWRlcnM6IHRoaXMuX2hlYWRlcnMsXHJcbiAgICAgIG1ldGhvZDogXCJQQVRDSFwiLFxyXG4gICAgICBib2R5OiBKU09OLnN0cmluZ2lmeSh7IGF2YXRhciB9KSxcclxuICAgIH0pLnRoZW4oKHJlcykgPT4gdGhpcy5fcHJvY2Vzc1Jlc3BvbnNlKHJlcykpO1xyXG4gIH1cclxuXHJcbiAgZ2V0SW5pdGlhbERhdGEoKSB7XHJcbiAgICByZXR1cm4gUHJvbWlzZS5hbGwoW2FwaS5nZXRVc2VySW5mbygpLCBhcGkuZ2V0SW5pdGlhbENhcmRzKCldKTtcclxuICB9XHJcbn1cclxuXHJcbmV4cG9ydCBjb25zdCBhcGkgPSBuZXcgQXBpKHtcclxuICBiYXNlVVJMOiBcImh0dHBzOi8vYXJvdW5kLm5vbW9yZXBhcnRpZXMuY28vdjEvY29ob3J0LTMtZW4vXCIsXHJcbiAgaGVhZGVyczoge1xyXG4gICAgYXV0aG9yaXphdGlvbjogYCR7VE9LRU59YCxcclxuICAgIFwiQ29udGVudC1UeXBlXCI6IFwiYXBwbGljYXRpb24vanNvblwiLFxyXG4gIH0sXHJcbn0pO1xyXG4iLCJpbXBvcnQgXCIuL2luZGV4LmNzc1wiO1xyXG5pbXBvcnQgRm9ybVZhbGlkYXRvciBmcm9tIFwiLi4vc2NyaXB0cy9jb21wb25lbnRzL0Zvcm1WYWxpZGF0b3IuanNcIjtcclxuaW1wb3J0IENhcmQgZnJvbSBcIi4uL3NjcmlwdHMvY29tcG9uZW50cy9DYXJkLmpzXCI7XHJcbmltcG9ydCBTZWN0aW9uIGZyb20gXCIuLi9zY3JpcHRzL2NvbXBvbmVudHMvU2VjdGlvbi5qc1wiO1xyXG5pbXBvcnQgUG9wdXBXaXRoSW1hZ2UgZnJvbSBcIi4uL3NjcmlwdHMvY29tcG9uZW50cy9Qb3B1cFdpdGhJbWFnZS5qc1wiO1xyXG5pbXBvcnQgVXNlckluZm8gZnJvbSBcIi4uL3NjcmlwdHMvY29tcG9uZW50cy9Vc2VySW5mby5qc1wiO1xyXG5pbXBvcnQgUG9wdXBXaXRoRm9ybSBmcm9tIFwiLi4vc2NyaXB0cy9jb21wb25lbnRzL1BvcHVwV2l0aEZvcm0uanNcIjtcclxuaW1wb3J0IHtcclxuICBidG5FZGl0UHJvZmlsZSxcclxuICBidG5BZGRDYXJkLFxyXG4gIGJ0blByb2ZpbGVQaWN0dXJlLFxyXG4gIHNldHRpbmdzLFxyXG4gIE1FSUQsXHJcbn0gZnJvbSBcIi4uL3NjcmlwdHMvdXRpbHMvY29uc3RhbnRzLmpzXCI7XHJcbmltcG9ydCB7IGFwaSB9IGZyb20gXCIuLi9zY3JpcHRzL3V0aWxzL0FwaS5qc1wiO1xyXG5pbXBvcnQgeyBXYXJuUG9wdXAgfSBmcm9tIFwiLi4vc2NyaXB0cy9jb21wb25lbnRzL1dhcm5Qb3B1cFwiO1xyXG5cclxuZnVuY3Rpb24gY3JlYXRlQ2FyZChjYXJkKSB7XHJcbiAgY29uc3QgY2FyZEVsZW1lbnQgPSBuZXcgQ2FyZChcclxuICAgIHtcclxuICAgICAgZGF0YTogY2FyZCxcclxuICAgICAgaGFuZGxlSW1nOiAoY2FyZCkgPT4ge1xyXG4gICAgICAgIHBvcHVwSW1nLm9wZW4oY2FyZCk7XHJcbiAgICAgIH0sXHJcbiAgICAgIGhhbmRsZURlbDogKGlkKSA9PiB7XHJcbiAgICAgICAgZGVsV2FyblBvcHVwLm9wZW4oKTtcclxuICAgICAgICBkZWxXYXJuUG9wdXAuc2V0QWN0aW9uKCgpID0+IHtcclxuICAgICAgICAgIGFwaVxyXG4gICAgICAgICAgICAuZGVsZXRlQ2FyZChpZClcclxuICAgICAgICAgICAgLnRoZW4oY2FyZEVsZW1lbnQucmVtb3ZlKCkpXHJcbiAgICAgICAgICAgIC5jYXRjaCgoZXJyKSA9PiBjb25zb2xlLmxvZyhlcnIpKTtcclxuICAgICAgICB9KTtcclxuICAgICAgfSxcclxuICAgICAgaGFuZGxlTGlrZTogKCkgPT4ge1xyXG4gICAgICAgIGlmIChjYXJkRWxlbWVudC5faXNMaWtlZCgpKSB7XHJcbiAgICAgICAgICBhcGlcclxuICAgICAgICAgICAgLnJlbW92ZUxpa2UoY2FyZEVsZW1lbnQuX2lkKVxyXG4gICAgICAgICAgICAudGhlbigocmVzcG9uc2UpID0+IGNhcmRFbGVtZW50LnVwZGF0ZUxpa2VzKHJlc3BvbnNlLmxpa2VzLmxlbmd0aCkpXHJcbiAgICAgICAgICAgIC5jYXRjaChjb25zb2xlLmVycm9yKTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgYXBpXHJcbiAgICAgICAgICAgIC5hZGRMaWtlKGNhcmRFbGVtZW50Ll9pZClcclxuICAgICAgICAgICAgLnRoZW4oKHJlc3BvbnNlKSA9PiBjYXJkRWxlbWVudC51cGRhdGVMaWtlcyhyZXNwb25zZS5saWtlcy5sZW5ndGgpKVxyXG4gICAgICAgICAgICAuY2F0Y2goY29uc29sZS5lcnJvcik7XHJcbiAgICAgICAgfVxyXG4gICAgICB9LFxyXG4gICAgfSxcclxuICAgIFwiI2NhcmRcIlxyXG4gICk7XHJcbiAgcmV0dXJuIGNhcmRFbGVtZW50Lm1ha2VDYXJkKCk7XHJcbn1cclxuXHJcbmNvbnN0IGdhbGxlcnlTZWN0aW9uID0gbmV3IFNlY3Rpb24oe1xyXG4gIHJlbmRlcmVyOiAoY2FyZCkgPT4ge1xyXG4gICAgcmV0dXJuIGNyZWF0ZUNhcmQoY2FyZCk7XHJcbiAgfSxcclxuICBzZWxlY3RvcjogXCIuZ2FsbGVyeVwiLFxyXG59KTtcclxuXHJcbmNvbnN0IHBvcHVwSW1nID0gbmV3IFBvcHVwV2l0aEltYWdlKFwiI2ltZ1BvcHVwXCIpO1xyXG5wb3B1cEltZy5zZXRFdmVudExpc3RlbmVycygpO1xyXG5cclxuZXhwb3J0IGNvbnN0IHByb2ZpbGVQaWN0dXJlUG9wdXAgPSBuZXcgUG9wdXBXaXRoRm9ybSh7XHJcbiAgc2VsZWN0b3I6IFwiI2F2YXRhclwiLFxyXG4gIGhhbmRsZVN1Ym1pdDogKGxpbmspID0+IHtcclxuICAgIGxpbmsgPSBsaW5rLmltYWdlTGluaztcclxuICAgIHByb2ZpbGVQaWN0dXJlUG9wdXAuc2hvd0xvYWRpbmcoKTtcclxuICAgIGFwaVxyXG4gICAgICAuY2hhbmdlQXZhdGFyKGxpbmspXHJcbiAgICAgIC50aGVuKChyZXMpID0+IHtcclxuICAgICAgICB1c2VySW5mby5zZXRVc2VySW5mbyhyZXMpO1xyXG4gICAgICAgIHByb2ZpbGVQaWN0dXJlUG9wdXAuY2xvc2UoKTtcclxuICAgICAgfSlcclxuICAgICAgLmNhdGNoKChlcnIpID0+IGNvbnNvbGUubG9nKGVycikpXHJcbiAgICAgIC5maW5hbGx5KHByb2ZpbGVQaWN0dXJlUG9wdXAuaGlkZUxvYWRpbmcoKSk7XHJcbiAgfSxcclxuICBsb2FkaW5nQnRuVGV4dDogXCJTYXZpbmcuLi5cIixcclxufSk7XHJcbnByb2ZpbGVQaWN0dXJlUG9wdXAuc2V0RXZlbnRMaXN0ZW5lcnMoKTtcclxuXHJcbmV4cG9ydCBjb25zdCBlZGl0UHJvZmlsZSA9IG5ldyBQb3B1cFdpdGhGb3JtKHtcclxuICBzZWxlY3RvcjogXCIjcHJvZmlsZVBvcHVwXCIsXHJcbiAgaGFuZGxlU3VibWl0OiAoZGF0YSkgPT4ge1xyXG4gICAgZWRpdFByb2ZpbGUuc2hvd0xvYWRpbmcoKTtcclxuICAgIGFwaVxyXG4gICAgICAucGF0Y2hVc2VySW5mbyhkYXRhKVxyXG4gICAgICAudGhlbigocmVzKSA9PiB7XHJcbiAgICAgICAgdXNlckluZm8uc2V0VXNlckluZm8ocmVzKTtcclxuICAgICAgICBlZGl0UHJvZmlsZS5jbG9zZSgpO1xyXG4gICAgICB9KVxyXG4gICAgICAuY2F0Y2goKGVycikgPT4gY29uc29sZS5sb2coZXJyKSlcclxuICAgICAgLmZpbmFsbHkoZWRpdFByb2ZpbGUuaGlkZUxvYWRpbmcoKSk7XHJcbiAgfSxcclxuICBsb2FkaW5nQnRuVGV4dDogXCJTYXZpbmcuLi5cIixcclxuXHJcbn0pO1xyXG5lZGl0UHJvZmlsZS5zZXRFdmVudExpc3RlbmVycygpO1xyXG5cclxuZXhwb3J0IGNvbnN0IGFkZENhcmQgPSBuZXcgUG9wdXBXaXRoRm9ybSh7XHJcbiAgc2VsZWN0b3I6IFwiI2FkZENhcmRQb3B1cFwiLFxyXG4gIGhhbmRsZVN1Ym1pdDogKGRhdGEpID0+IHtcclxuICAgIGFkZENhcmQuc2hvd0xvYWRpbmcoKTtcclxuICAgIGFwaVxyXG4gICAgICAucG9zdE5ld0NhcmQoZGF0YSlcclxuICAgICAgLnRoZW4oKHJlcykgPT4ge1xyXG4gICAgICAgIGdhbGxlcnlTZWN0aW9uLmFkZEl0ZW0ocmVzKTtcclxuICAgICAgICBhZGRDYXJkLmNsb3NlKCk7XHJcbiAgICAgIH0pXHJcbiAgICAgIC5jYXRjaCgoZXJyKSA9PiBjb25zb2xlLmxvZyhlcnIpKVxyXG4gICAgICAuZmluYWxseShhZGRDYXJkLmhpZGVMb2FkaW5nKCkpO1xyXG4gIH0sXHJcbiAgbG9hZGluZ0J0blRleHQ6IFwiU2F2aW5nLi4uXCIsXHJcblxyXG59KTtcclxuYWRkQ2FyZC5zZXRFdmVudExpc3RlbmVycygpO1xyXG5cclxuZXhwb3J0IGNvbnN0IGRlbFdhcm5Qb3B1cCA9IG5ldyBXYXJuUG9wdXAoXCIjY2FyZERlbGV0ZVwiKTtcclxuZGVsV2FyblBvcHVwLnNldEV2ZW50TGlzdGVuZXJzKCk7XHJcblxyXG5jb25zdCB1c2VySW5mbyA9IG5ldyBVc2VySW5mbyh7XHJcbiAgbmFtZVNlbGVjdG9yOiBcIi5wcm9maWxlX191c2VyLW5hbWVcIixcclxuICBqb2JTZWxlY3RvcjogXCIucHJvZmlsZV9fdXNlci1hYm91dFwiLFxyXG59KTtcclxuXHJcbmNvbnN0IGZvcm1WYWxpZGF0b3JzID0ge307XHJcbmNvbnN0IGVuYWJsZVZhbGlkYXRpb24gPSAoc2V0dGluZ3MpID0+IHtcclxuICBjb25zdCBmb3JtTGlzdCA9IEFycmF5LmZyb20oZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbChzZXR0aW5ncy5mb3JtU2VsZWN0b3IpKTtcclxuICBmb3JtTGlzdC5mb3JFYWNoKChmb3JtRWxlbWVudCkgPT4ge1xyXG4gICAgY29uc3QgdmFsaWRhdG9yID0gbmV3IEZvcm1WYWxpZGF0b3Ioc2V0dGluZ3MsIGZvcm1FbGVtZW50KTtcclxuXHJcbiAgICBjb25zdCBmb3JtTmFtZSA9IGZvcm1FbGVtZW50LmdldEF0dHJpYnV0ZShcIm5hbWVcIik7XHJcblxyXG4gICAgZm9ybVZhbGlkYXRvcnNbZm9ybU5hbWVdID0gdmFsaWRhdG9yO1xyXG4gICAgdmFsaWRhdG9yLmVuYWJsZVZhbGlkYXRpb24oKTtcclxuICB9KTtcclxufTtcclxuXHJcbmVuYWJsZVZhbGlkYXRpb24oc2V0dGluZ3MpO1xyXG5cclxuYXBpLmdldEluaXRpYWxEYXRhKCkudGhlbigoW3VzZXJEYXRhLCBjYXJkc0FycmF5XSkgPT4ge1xyXG4gIHVzZXJJbmZvLnNldFVzZXJJbmZvKHVzZXJEYXRhKTtcclxuICBNRUlELnNlbGYgPSB1c2VyRGF0YS5faWQ7XHJcbiAgZ2FsbGVyeVNlY3Rpb24ucmVuZGVyQWxsKGNhcmRzQXJyYXkpO1xyXG59KTtcclxuXHJcbmJ0blByb2ZpbGVQaWN0dXJlLmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCBoYW5kbGVQcm9maWxlUGljdHVyZSk7XHJcblxyXG5idG5FZGl0UHJvZmlsZS5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgaGFuZGxlRWRpdFByb2ZpbGVCdG4pO1xyXG5cclxuYnRuQWRkQ2FyZC5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgaGFuZGxlQWRkQ2FyZCk7XHJcblxyXG5mdW5jdGlvbiBoYW5kbGVQcm9maWxlUGljdHVyZSgpIHtcclxuICBwcm9maWxlUGljdHVyZVBvcHVwLm9wZW4oKTtcclxufVxyXG5cclxuZnVuY3Rpb24gaGFuZGxlRWRpdFByb2ZpbGVCdG4oKSB7XHJcbiAgY29uc3QgZGF0YSA9IHVzZXJJbmZvLmdldFVzZXJJbmZvKCk7XHJcbiAgZWRpdFByb2ZpbGUub3BlbihkYXRhKTtcclxuICBmb3JtVmFsaWRhdG9yc1tcImVkaXRQcm9maWxlRm9ybVwiXS5yZXNldFZhbGlkYXRpb24oKTtcclxufVxyXG5cclxuZnVuY3Rpb24gaGFuZGxlQWRkQ2FyZCgpIHtcclxuICBmb3JtVmFsaWRhdG9yc1tcImFkZENhcmRGb3JtXCJdLnJlc2V0VmFsaWRhdGlvbigpO1xyXG4gIGFkZENhcmQub3BlbigpO1xyXG59XHJcblxyXG5leHBvcnQgeyB1c2VySW5mbywgZm9ybVZhbGlkYXRvcnMgfTtcclxuIiwiZXhwb3J0IGRlZmF1bHQgY2xhc3MgU2VjdGlvbiB7XHJcbiAgY29uc3RydWN0b3IoeyByZW5kZXJlciwgc2VsZWN0b3IgfSkge1xyXG4gICAgdGhpcy5fcmVuZGVyZXIgPSByZW5kZXJlcjtcclxuICAgIHRoaXMuX2NvbnRhaW5lciA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3Ioc2VsZWN0b3IpO1xyXG4gIH1cclxuXHJcbiAgYWRkSXRlbShpdGVtKSB7XHJcbiAgICBjb25zdCBjYXJkID0gdGhpcy5fcmVuZGVyZXIoaXRlbSk7XHJcbiAgICB0aGlzLl9jb250YWluZXIucHJlcGVuZChjYXJkKTtcclxuICB9XHJcblxyXG4gIF9jbGVhcigpIHtcclxuICAgIHRoaXMuX2NvbnRhaW5lci5pbm5lckhUTUwgPSBcIlwiO1xyXG4gIH1cclxuXHJcbiAgcmVuZGVyQWxsKGl0ZW1zKSB7XHJcbiAgICB0aGlzLl9jbGVhcigpO1xyXG4gICAgdGhpcy5fcmVuZGVySXRlbXMgPSBpdGVtcztcclxuICAgIHRoaXMuX3JlbmRlckl0ZW1zLmZvckVhY2goKGl0ZW0pID0+IHtcclxuICAgICAgdGhpcy5hZGRJdGVtKGl0ZW0pO1xyXG4gICAgfSk7XHJcbiAgfVxyXG59XHJcbiIsImltcG9ydCB7IE1FSUQgfSBmcm9tIFwiLi4vdXRpbHMvY29uc3RhbnRzLmpzXCJcclxuXHJcblxyXG5jbGFzcyBDYXJkIHtcclxuICBjb25zdHJ1Y3Rvcih7IGRhdGEsIGhhbmRsZUltZywgaGFuZGxlRGVsLCBoYW5kbGVMaWtlIH0sIHNlbGVjdG9yKSB7XHJcbiAgICB0aGlzLl9uYW1lID0gZGF0YS5uYW1lO1xyXG4gICAgdGhpcy5fc3JjID0gZGF0YS5saW5rO1xyXG4gICAgdGhpcy5fbGlrZXNDb3VudCA9IGRhdGEubGlrZXMubGVuZ3RoO1xyXG4gICAgdGhpcy5faWQgPSBkYXRhLl9pZDtcclxuICAgIHRoaXMub3duZXJJZCA9IGRhdGEub3duZXIuX2lkO1xyXG4gICAgdGhpcy5fc2VsZWN0b3IgPSBzZWxlY3RvcjtcclxuICAgIHRoaXMuX2hhbmxkZUltZ0NsaWNrID0gaGFuZGxlSW1nO1xyXG4gICAgdGhpcy5faGFuZGxlRGVsID0gaGFuZGxlRGVsO1xyXG4gICAgdGhpcy5faGFuZGxlTGlrZUJ0biA9IGhhbmRsZUxpa2U7XHJcbiAgICBcclxuICB9XHJcblxyXG4gIF9nZXRUZW1wbGF0ZSgpIHtcclxuICAgIGNvbnN0IGNhcmRFbGVtZW50ID0gZG9jdW1lbnRcclxuICAgICAgLnF1ZXJ5U2VsZWN0b3IoYCR7dGhpcy5fc2VsZWN0b3J9YClcclxuICAgICAgLmNvbnRlbnQuY2xvbmVOb2RlKHRydWUpO1xyXG4gICAgdGhpcy5faW1nID0gY2FyZEVsZW1lbnQucXVlcnlTZWxlY3RvcihcIi5jYXJkX19pbWdcIik7XHJcbiAgICB0aGlzLl9jYXB0aW9uID0gY2FyZEVsZW1lbnQucXVlcnlTZWxlY3RvcihcIi5jYXJkX19jYXB0aW9uXCIpO1xyXG4gICAgdGhpcy5fdHJhc2ggPSBjYXJkRWxlbWVudC5xdWVyeVNlbGVjdG9yKFwiLmNhcmRfX3RyYXNoXCIpO1xyXG4gICAgdGhpcy5fbGlrZSA9IGNhcmRFbGVtZW50LnF1ZXJ5U2VsZWN0b3IoXCIuY2FyZF9fbGlrZS1idG5cIik7XHJcbiAgICB0aGlzLl9saWtlcyA9IGNhcmRFbGVtZW50LnF1ZXJ5U2VsZWN0b3IoXCIuY2FyZF9fbGlrZS1jb3VudGVyXCIpO1xyXG5cclxuICAgIHJldHVybiBjYXJkRWxlbWVudDtcclxuICB9XHJcblxyXG4gIG1ha2VDYXJkKCkge1xyXG4gICAgdGhpcy5fZWxlbWVudCA9IHRoaXMuX2dldFRlbXBsYXRlKCkucXVlcnlTZWxlY3RvcihcIi5jYXJkXCIpO1xyXG4gICAgdGhpcy5faW1nLnNldEF0dHJpYnV0ZShcInNyY1wiLCB0aGlzLl9zcmMpO1xyXG4gICAgdGhpcy5faW1nLnNldEF0dHJpYnV0ZShcImFsdFwiLCB0aGlzLl9uYW1lKTtcclxuICAgIHRoaXMuX2NhcHRpb24udGV4dENvbnRlbnQgPSB0aGlzLl9uYW1lO1xyXG4gICAgdGhpcy5fbGlrZXMudGV4dENvbnRlbnQgPSB0aGlzLl9saWtlc0NvdW50O1xyXG4gICAgdGhpcy5fYWRkTGlzdGVuZXJzKCk7XHJcbiAgICBpZiAoTUVJRC5zZWxmICE9IHRoaXMub3duZXJJZCkge1xyXG4gICAgICB0aGlzLl90cmFzaC5jbGFzc0xpc3QuYWRkKFwidHJhc2hfZGlzcGxheS1ub25lXCIpO1xyXG4gICAgICB0aGlzLl90cmFzaC5zZXRBdHRyaWJ1dGUoXCJkaXNhYmxlZFwiLCBcIlwiKTtcclxuICAgIH1cclxuICAgIHRoaXMuX2VsZW1lbnQuc2V0QXR0cmlidXRlKFwiaWRcIiwgdGhpcy5faWQpO1xyXG4gICAgcmV0dXJuIHRoaXMuX2VsZW1lbnQ7XHJcbiAgfVxyXG5cclxuICBfYWRkTGlzdGVuZXJzKCkge1xyXG4gICAgdGhpcy5fbGlrZS5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgKCkgPT4gdGhpcy5faGFuZGxlTGlrZUJ0bigpKTtcclxuICAgIHRoaXMuX2ltZy5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgKCkgPT5cclxuICAgICAgdGhpcy5faGFubGRlSW1nQ2xpY2soeyBuYW1lOiB0aGlzLl9uYW1lLCBzcmM6IHRoaXMuX3NyYyB9KVxyXG4gICAgKTtcclxuICAgIHRoaXMuX3RyYXNoLmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCAoKSA9PiB0aGlzLl9oYW5kbGVEZWwodGhpcy5faWQpKTtcclxuICB9XHJcblxyXG4gIHVwZGF0ZUxpa2VzKGxpa2VzKSB7XHJcbiAgICB0aGlzLl9saWtlc0NvdW50ID0gbGlrZXM7XHJcbiAgICB0aGlzLl9yZW5kZXJMaWtlcygpO1xyXG4gIH1cclxuXHJcbiAgX2lzTGlrZWQoKSB7XHJcbiAgICByZXR1cm4gKCEodGhpcy5fbGlrZS5jbGFzc0xpc3QubGVuZ3RoID09IDEpKTtcclxuICB9XHJcblxyXG4gIF9yZW5kZXJMaWtlcygpIHtcclxuICAgIHRoaXMuX2xpa2VzLnRleHRDb250ZW50ID0gdGhpcy5fbGlrZXNDb3VudDtcclxuICAgIHRoaXMuX2xpa2UuY2xhc3NMaXN0LnRvZ2dsZShcImNhcmRfX2xpa2UtYnRuX2FjdGl2ZVwiKTtcclxuICB9XHJcblxyXG4gIHJlbW92ZSgpIHtcclxuICAgIHRoaXMuX2VsZW1lbnQucmVtb3ZlKCk7XHJcbiAgfVxyXG59XHJcbmV4cG9ydCBkZWZhdWx0IENhcmQ7XHJcbiIsImltcG9ydCBQb3B1cCBmcm9tIFwiLi9Qb3B1cC5qc1wiO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgUG9wdXBXaXRoSW1hZ2UgZXh0ZW5kcyBQb3B1cCB7XHJcbiAgY29uc3RydWN0b3Ioc2VsZWN0b3IpIHtcclxuICAgIHN1cGVyKHNlbGVjdG9yKTtcclxuICAgIHRoaXMuX2ltYWdlID0gdGhpcy5fbW9kYWwucXVlcnlTZWxlY3RvcihcIi5pbWctcG9wb3V0X19pbWdcIik7XHJcbiAgICB0aGlzLl9jYXB0aW9uID0gdGhpcy5fbW9kYWwucXVlcnlTZWxlY3RvcihcIi5pbWctcG9wb3V0X19jYXB0aW9uXCIpO1xyXG4gIH1cclxuXHJcbiAgb3BlbihkYXRhKSB7XHJcbiAgICB0aGlzLl9pbWFnZS5zcmMgPSBkYXRhLnNyYztcclxuICAgIHRoaXMuX2ltYWdlLmFsdCA9IGRhdGEubmFtZTtcclxuICAgIHRoaXMuX2NhcHRpb24udGV4dENvbnRlbnQgPSBkYXRhLm5hbWU7XHJcbiAgICBzdXBlci5vcGVuKCk7XHJcbiAgfVxyXG59XHJcbiIsImltcG9ydCBQb3B1cCBmcm9tIFwiLi9Qb3B1cFwiO1xyXG5cclxuZXhwb3J0IGNsYXNzIFdhcm5Qb3B1cCBleHRlbmRzIFBvcHVwIHtcclxuICBzZXRBY3Rpb24oYWN0aW9uKSB7XHJcbiAgICB0aGlzLl9oYW5kbGVTdWJtaXQgPSBhY3Rpb247XHJcbiAgfVxyXG5cclxuICBzZXRFdmVudExpc3RlbmVycygpIHtcclxuICAgIHRoaXMuX21vZGFsXHJcbiAgICAgIC5xdWVyeVNlbGVjdG9yKFwiLnBvcHVwLWVkaXRfX3N1Ym1pdFwiKVxyXG4gICAgICAuYWRkRXZlbnRMaXN0ZW5lcihcIm1vdXNldXBcIiwgKGV2dCkgPT4ge1xyXG4gICAgICAgIHRoaXMuX2hhbmRsZVN1Ym1pdChldnQpO1xyXG4gICAgICAgIHRoaXMuY2xvc2UoKTtcclxuICAgICAgfSk7XHJcbiAgICBzdXBlci5zZXRFdmVudExpc3RlbmVycygpO1xyXG4gIH1cclxufVxyXG4iLCJleHBvcnQgZGVmYXVsdCBjbGFzcyBVc2VySW5mbyB7XHJcbiAgY29uc3RydWN0b3IoZGF0YSkge1xyXG4gICAgdGhpcy5fbmFtZVNlbGVjdG9yID0gZGF0YS5uYW1lU2VsZWN0b3I7XHJcbiAgICB0aGlzLl9qb2JTZWxlY3RvciA9IGRhdGEuam9iU2VsZWN0b3I7XHJcbiAgICB0aGlzLl9uYW1lTm9kZSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoYCR7dGhpcy5fbmFtZVNlbGVjdG9yfWApO1xyXG4gICAgdGhpcy5fam9iTm9kZSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoYCR7dGhpcy5fam9iU2VsZWN0b3J9YCk7XHJcbiAgICB0aGlzLl9waWN0dXJlTm9kZSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIucHJvZmlsZV9fcGljdHVyZVwiKTtcclxuICAgIHRoaXMuaWQgPSBkYXRhLl9pZDtcclxuICAgIHRoaXMuX2F2YXRhciA9IGRhdGEuYXZhdGFyO1xyXG4gIH1cclxuXHJcbiAgZ2V0VXNlckluZm8oKSB7XHJcbiAgICB0aGlzLl9uYW1lID0gdGhpcy5fbmFtZU5vZGUudGV4dENvbnRlbnQ7XHJcbiAgICB0aGlzLl9qb2IgPSB0aGlzLl9qb2JOb2RlLnRleHRDb250ZW50O1xyXG5cclxuICAgIHJldHVybiB7IG5hbWU6IHRoaXMuX25hbWUsIGFib3V0OiB0aGlzLl9qb2IgfTtcclxuICB9XHJcblxyXG4gIHNldFVzZXJJbmZvKG5ld0RhdGEpIHtcclxuICAgIHRoaXMuX25hbWVOb2RlLnRleHRDb250ZW50ID0gbmV3RGF0YS5uYW1lO1xyXG4gICAgdGhpcy5fam9iTm9kZS50ZXh0Q29udGVudCA9IG5ld0RhdGEuYWJvdXQ7XHJcbiAgICB0aGlzLmlkID0gbmV3RGF0YS5faWQ7XHJcbiAgICB0aGlzLnNldFVzZXJBdmF0YXIobmV3RGF0YS5hdmF0YXIpO1xyXG4gIH1cclxuXHJcbiAgZ2V0VXNlckF2YXRhcigpIHtcclxuICAgIHJldHVybiB0aGlzLl9hdmF0YXI7XHJcbiAgfVxyXG5cclxuICBzZXRVc2VyQXZhdGFyKGF2YXRhcikge1xyXG4gICAgdGhpcy5fcGljdHVyZU5vZGUuc3JjID0gYXZhdGFyO1xyXG4gIH1cclxufVxyXG4iLCJjbGFzcyBGb3JtVmFsaWRhdG9yIHtcclxuICBjb25zdHJ1Y3RvcihzZXR0aW5ncywgZm9ybUVsZW1lbnQpIHtcclxuICAgIHRoaXMuX3NldHRpbmdzID0gc2V0dGluZ3M7XHJcbiAgICB0aGlzLl9mb3JtRWxlbWVudCA9IGZvcm1FbGVtZW50O1xyXG4gICAgdGhpcy5faW5wdXRMaXN0ID0gQXJyYXkuZnJvbShcclxuICAgICAgdGhpcy5fZm9ybUVsZW1lbnQucXVlcnlTZWxlY3RvckFsbCh0aGlzLl9zZXR0aW5ncy5pbnB1dFNlbGVjdG9yKVxyXG4gICAgKTtcclxuICAgIHRoaXMuX2J0bkVsZW1lbnQgPSB0aGlzLl9mb3JtRWxlbWVudC5xdWVyeVNlbGVjdG9yKFxyXG4gICAgICB0aGlzLl9zZXR0aW5ncy5zdWJtaXRCdXR0b25TZWxlY3RvclxyXG4gICAgKTtcclxuICB9XHJcblxyXG4gIHJlc2V0VmFsaWRhdGlvbigpIHtcclxuICAgIHRoaXMuX3RvZ2dsZUJ0blN0YXRlKCk7XHJcbiAgICB0aGlzLl9pbnB1dExpc3QuZm9yRWFjaCgoaW5wdXRFbGVtZW50KSA9PiB7XHJcbiAgICAgIHRoaXMuX2hpZGVJbnB1dEVycm9yKGlucHV0RWxlbWVudCk7XHJcbiAgICB9KTtcclxuICB9XHJcblxyXG4gIGVuYWJsZVZhbGlkYXRpb24oKSB7XHJcbiAgICB0aGlzLl90b2dnbGVCdG5TdGF0ZSgpO1xyXG4gICAgdGhpcy5yZXNldFZhbGlkYXRpb24oKTtcclxuXHJcbiAgICB0aGlzLl9pbnB1dExpc3QuZm9yRWFjaCgoaW5wdXRFbGVtZW50KSA9PiB7XHJcbiAgICAgIGlucHV0RWxlbWVudC5hZGRFdmVudExpc3RlbmVyKFwiaW5wdXRcIiwgKCkgPT4ge1xyXG4gICAgICAgIHRoaXMuX2hpZGVPclNob3dFcnJvcihpbnB1dEVsZW1lbnQpO1xyXG4gICAgICAgIHRoaXMuX3RvZ2dsZUJ0blN0YXRlKCk7XHJcbiAgICAgIH0pO1xyXG4gICAgfSk7XHJcbiAgfVxyXG5cclxuICBfaGlkZU9yU2hvd0Vycm9yID0gKGlucHV0RWxlbWVudCkgPT4ge1xyXG4gICAgaWYgKGlucHV0RWxlbWVudC52YWxpZGl0eS52YWxpZCkge1xyXG4gICAgICB0aGlzLl9oaWRlSW5wdXRFcnJvcihpbnB1dEVsZW1lbnQpO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgdGhpcy5fc2hvd0lucHV0RXJyb3IoaW5wdXRFbGVtZW50LCBpbnB1dEVsZW1lbnQudmFsaWRhdGlvbk1lc3NhZ2UpO1xyXG4gICAgfVxyXG4gIH07XHJcblxyXG4gIF9zaG93SW5wdXRFcnJvciA9IChpbnB1dEVsZW1lbnQsIGVycm9yTXNnKSA9PiB7XHJcbiAgICBjb25zdCBlcnJvckVsZW1lbnQgPSB0aGlzLl9mb3JtRWxlbWVudC5xdWVyeVNlbGVjdG9yKFxyXG4gICAgICBgIyR7aW5wdXRFbGVtZW50LmdldEF0dHJpYnV0ZShcIm5hbWVcIil9YFxyXG4gICAgKTtcclxuICAgIGlucHV0RWxlbWVudC5jbGFzc0xpc3QuYWRkKHRoaXMuX3NldHRpbmdzLmlucHV0RXJyb3JDbGFzcyk7XHJcbiAgICBlcnJvckVsZW1lbnQudGV4dENvbnRlbnQgPSBlcnJvck1zZztcclxuICAgIGVycm9yRWxlbWVudC5jbGFzc0xpc3QucmVtb3ZlKHRoaXMuX3NldHRpbmdzLmVycm9yQ2xhc3MpO1xyXG4gIH07XHJcblxyXG4gIF9oaWRlSW5wdXRFcnJvciA9IChpbnB1dEVsZW1lbnQpID0+IHtcclxuICAgIGNvbnN0IGVycm9yRWxlbWVudCA9IHRoaXMuX2Zvcm1FbGVtZW50LnF1ZXJ5U2VsZWN0b3IoXHJcbiAgICAgIGAjJHtpbnB1dEVsZW1lbnQuZ2V0QXR0cmlidXRlKFwibmFtZVwiKX1gXHJcbiAgICApO1xyXG4gICAgaW5wdXRFbGVtZW50LmNsYXNzTGlzdC5yZW1vdmUodGhpcy5fc2V0dGluZ3MuaW5wdXRFcnJvckNsYXNzKTtcclxuICAgIGVycm9yRWxlbWVudC5jbGFzc0xpc3QuYWRkKHRoaXMuX3NldHRpbmdzLmVycm9yQ2xhc3MpO1xyXG4gICAgZXJyb3JFbGVtZW50LnRleHRDb250ZW50ID0gXCJcIjtcclxuICB9O1xyXG5cclxuICBfaGFzSW52YWxpZElucHV0ID0gKGlucHV0TGlzdCkgPT4ge1xyXG4gICAgcmV0dXJuIGlucHV0TGlzdC5zb21lKChpbnB1dEVsZW1lbnQpID0+IHtcclxuICAgICAgcmV0dXJuICFpbnB1dEVsZW1lbnQudmFsaWRpdHkudmFsaWQ7XHJcbiAgICB9KTtcclxuICB9O1xyXG5cclxuICBfdG9nZ2xlQnRuU3RhdGUoKSB7XHJcbiAgICBpZiAodGhpcy5faGFzSW52YWxpZElucHV0KHRoaXMuX2lucHV0TGlzdCkpIHtcclxuICAgICAgdGhpcy5fYnRuRWxlbWVudC5zZXRBdHRyaWJ1dGUoXCJkaXNhYmxlZFwiLCBcIlwiKTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIHRoaXMuX2J0bkVsZW1lbnQucmVtb3ZlQXR0cmlidXRlKFwiZGlzYWJsZWRcIiwgXCJcIik7XHJcbiAgICB9XHJcbiAgfVxyXG59XHJcbmV4cG9ydCBkZWZhdWx0IEZvcm1WYWxpZGF0b3I7XHJcbiJdLCJuYW1lcyI6WyJNRUlEIiwic2VsZiIsImJ0bkVkaXRQcm9maWxlIiwiZG9jdW1lbnQiLCJxdWVyeVNlbGVjdG9yIiwiYnRuQWRkQ2FyZCIsImJ0blByb2ZpbGVQaWN0dXJlIiwiUE9QVVBfQUNUSVZFX0NMQVNTIiwiUG9wdXAiLCJjb25zdHJ1Y3RvciIsInNlbGVjdG9yIiwidGhpcyIsIl9zZWxlY3RvciIsIl9tb2RhbCIsIl9oYW5kbGVFc2NLZXkiLCJiaW5kIiwiX2hhbmRsZUNsb3NlUG9wdXAiLCJldnQiLCJrZXkiLCJjbG9zZSIsInNldEV2ZW50TGlzdGVuZXJzIiwiYWRkRXZlbnRMaXN0ZW5lciIsInRhcmdldCIsImNsYXNzTGlzdCIsImNvbnRhaW5zIiwib3BlbiIsImFkZCIsInJlbW92ZUV2ZW50TGlzdGVuZXIiLCJyZW1vdmUiLCJQb3B1cFdpdGhGb3JtIiwiaGFuZGxlU3VibWl0IiwibG9hZGluZ0J0blRleHQiLCJzdXBlciIsIl9oYW5kbGVTdWJtaXQiLCJfaGFuZGxlcldpdGhGb3JtIiwiX2Zvcm0iLCJfaW5wdXRGaWVsZHMiLCJxdWVyeVNlbGVjdG9yQWxsIiwiX3N1Ym1pdEJ0biIsIl9idG5Jbml0VGV4dCIsInRleHRDb250ZW50IiwiX2xvYWRpbmdCdG5UZXh0IiwiX2dldElucHV0VmFsdWVzIiwiaW5wdXRWYWx1ZXMiLCJmb3JFYWNoIiwiZmllbGQiLCJpZCIsInZhbHVlIiwiZGF0YSIsIl9zZXRJbnB1dFZhbHVlcyIsInZhbHVlcyIsIk9iamVjdCIsImtleXMiLCJwcmV2ZW50RGVmYXVsdCIsInNob3dMb2FkaW5nIiwiaGlkZUxvYWRpbmciLCJzZXRUaW1lb3V0IiwicmVzZXQiLCJhcGkiLCJiYXNlVVJMIiwiaGVhZGVycyIsInJlcyIsIm9rIiwianNvbiIsIlByb21pc2UiLCJyZWplY3QiLCJzdGF0dXNUZXh0IiwiX2Jhc2VVUkwiLCJfaGVhZGVycyIsImdldFVzZXJJbmZvIiwiZmV0Y2giLCJ0aGVuIiwiX3Byb2Nlc3NSZXNwb25zZSIsImdldEluaXRpYWxDYXJkcyIsInBhdGNoVXNlckluZm8iLCJtZXRob2QiLCJib2R5IiwiSlNPTiIsInN0cmluZ2lmeSIsInBvc3ROZXdDYXJkIiwiZGVsZXRlQ2FyZCIsImFkZExpa2UiLCJyZW1vdmVMaWtlIiwiY2hhbmdlQXZhdGFyIiwiYXZhdGFyIiwiZ2V0SW5pdGlhbERhdGEiLCJhbGwiLCJhdXRob3JpemF0aW9uIiwiZ2FsbGVyeVNlY3Rpb24iLCJyZW5kZXJlciIsIl9yZW5kZXJlciIsIl9jb250YWluZXIiLCJhZGRJdGVtIiwiaXRlbSIsImNhcmQiLCJwcmVwZW5kIiwiX2NsZWFyIiwiaW5uZXJIVE1MIiwicmVuZGVyQWxsIiwiaXRlbXMiLCJfcmVuZGVySXRlbXMiLCJjYXJkRWxlbWVudCIsImhhbmRsZUltZyIsImhhbmRsZURlbCIsImhhbmRsZUxpa2UiLCJfbmFtZSIsIm5hbWUiLCJfc3JjIiwibGluayIsIl9saWtlc0NvdW50IiwibGlrZXMiLCJsZW5ndGgiLCJfaWQiLCJvd25lcklkIiwib3duZXIiLCJfaGFubGRlSW1nQ2xpY2siLCJfaGFuZGxlRGVsIiwiX2hhbmRsZUxpa2VCdG4iLCJfZ2V0VGVtcGxhdGUiLCJjb250ZW50IiwiY2xvbmVOb2RlIiwiX2ltZyIsIl9jYXB0aW9uIiwiX3RyYXNoIiwiX2xpa2UiLCJfbGlrZXMiLCJtYWtlQ2FyZCIsIl9lbGVtZW50Iiwic2V0QXR0cmlidXRlIiwiX2FkZExpc3RlbmVycyIsInNyYyIsInVwZGF0ZUxpa2VzIiwiX3JlbmRlckxpa2VzIiwiX2lzTGlrZWQiLCJ0b2dnbGUiLCJwb3B1cEltZyIsImRlbFdhcm5Qb3B1cCIsInNldEFjdGlvbiIsImNhdGNoIiwiZXJyIiwiY29uc29sZSIsImxvZyIsInJlc3BvbnNlIiwiZXJyb3IiLCJjcmVhdGVDYXJkIiwiX2ltYWdlIiwiYWx0IiwicHJvZmlsZVBpY3R1cmVQb3B1cCIsImltYWdlTGluayIsInVzZXJJbmZvIiwic2V0VXNlckluZm8iLCJmaW5hbGx5IiwiZWRpdFByb2ZpbGUiLCJhZGRDYXJkIiwiYWN0aW9uIiwiX25hbWVTZWxlY3RvciIsIm5hbWVTZWxlY3RvciIsIl9qb2JTZWxlY3RvciIsImpvYlNlbGVjdG9yIiwiX25hbWVOb2RlIiwiX2pvYk5vZGUiLCJfcGljdHVyZU5vZGUiLCJfYXZhdGFyIiwiX2pvYiIsImFib3V0IiwibmV3RGF0YSIsInNldFVzZXJBdmF0YXIiLCJnZXRVc2VyQXZhdGFyIiwiZm9ybVZhbGlkYXRvcnMiLCJzZXR0aW5ncyIsImZvcm1TZWxlY3RvciIsImlucHV0U2VsZWN0b3IiLCJzdWJtaXRCdXR0b25TZWxlY3RvciIsImluYWN0aXZlQnV0dG9uQ2xhc3MiLCJpbnB1dEVycm9yQ2xhc3MiLCJlcnJvckNsYXNzIiwiQXJyYXkiLCJmcm9tIiwiZm9ybUVsZW1lbnQiLCJ2YWxpZGF0b3IiLCJpbnB1dEVsZW1lbnQiLCJ2YWxpZGl0eSIsInZhbGlkIiwiX2hpZGVJbnB1dEVycm9yIiwiX3Nob3dJbnB1dEVycm9yIiwidmFsaWRhdGlvbk1lc3NhZ2UiLCJlcnJvck1zZyIsImVycm9yRWxlbWVudCIsIl9mb3JtRWxlbWVudCIsImdldEF0dHJpYnV0ZSIsIl9zZXR0aW5ncyIsImlucHV0TGlzdCIsInNvbWUiLCJfaW5wdXRMaXN0IiwiX2J0bkVsZW1lbnQiLCJyZXNldFZhbGlkYXRpb24iLCJfdG9nZ2xlQnRuU3RhdGUiLCJlbmFibGVWYWxpZGF0aW9uIiwiX2hpZGVPclNob3dFcnJvciIsIl9oYXNJbnZhbGlkSW5wdXQiLCJyZW1vdmVBdHRyaWJ1dGUiLCJmb3JtTmFtZSIsInVzZXJEYXRhIiwiY2FyZHNBcnJheSJdLCJzb3VyY2VSb290IjoiIn0=