!function(){"use strict";function e(e,t,s){return t in e?Object.defineProperty(e,t,{value:s,enumerable:!0,configurable:!0,writable:!0}):e[t]=s,e}let t={self:""};const s=document.querySelector(".profile__edit-button"),i=document.querySelector(".profile__add-btn"),n=document.querySelector(".profile__picture-button");const r="popup_active";class o{constructor(e){this._selector=e,this._modal=document.querySelector("".concat(this._selector)),this._handleEscKey=this._handleEscKey.bind(this),this._handleClosePopup=this._handleClosePopup.bind(this)}_handleEscKey(e){"Escape"===e.key&&this.close()}setEventListeners(){this._modal.addEventListener("mouseup",this._handleClosePopup)}_handleClosePopup(e){e.target.classList.contains(r)&&this.close(),e.target.classList.contains("popup__container-close")&&this.close()}open(){document.addEventListener("keyup",this._handleEscKey),this._modal.classList.add(r)}close(){document.removeEventListener("keyup",this._handleEscKey),this._modal.classList.remove(r)}}class a extends o{constructor(e){let{selector:t,handleSubmit:s,loadingBtnText:i}=e;super(t),this._handleSubmit=s,this._handleSubmit=this._handleSubmit.bind(this),this._handlerWithForm=this._handlerWithForm.bind(this),this._form=this._modal.querySelector(".popup-edit"),this._inputFields=[...this._form.querySelectorAll(".popup-edit__field")],this._submitBtn=this._modal.querySelector(".popup-edit__submit"),this._btnInitText=this._submitBtn.textContent,this._loadingBtnText=i}_getInputValues(){const e={};return this._inputFields.forEach((t=>{e[t.id]=t.value})),console.log(e),e}open(e){e&&this._setInputValues(e),super.open()}_setInputValues(e){this._inputFields.forEach((t=>{Object.keys(e).forEach((s=>{t.id===s&&(t.value=e[s])}))}))}_handlerWithForm(e){e.preventDefault(),this._handleSubmit(this._getInputValues())}showLoading(){this._submitBtn.textContent=this._loadingBtnText}hideLoading(){this._submitBtn.textContent=this._btnInitText}setEventListeners(){this._form.addEventListener("submit",this._handlerWithForm),super.setEventListeners()}close(){super.close(),setTimeout((()=>this._form.reset()),500)}}const h=new class{constructor(e){let{baseURL:t,headers:s}=e;var i,n;n=e=>e.ok?e.json():Promise.reject("Error: ".concat(e.statusText)),(i="_processResponse")in this?Object.defineProperty(this,i,{value:n,enumerable:!0,configurable:!0,writable:!0}):this[i]=n,this._baseURL=t,this._headers=s}getUserInfo(){return fetch("".concat(this._baseURL,"/users/me"),{headers:this._headers}).then((e=>this._processResponse(e)))}getInitialCards(){return fetch("".concat(this._baseURL,"/cards"),{headers:this._headers}).then((e=>this._processResponse(e)))}patchUserInfo(e){return fetch("".concat(this._baseURL,"users/me"),{headers:this._headers,method:"PATCH",body:JSON.stringify(e)}).then((e=>this._processResponse(e)))}postNewCard(e){return fetch("".concat(this._baseURL,"/cards"),{headers:this._headers,method:"POST",body:JSON.stringify(e)}).then((e=>this._processResponse(e)))}deleteCard(e){return fetch("".concat(this._baseURL,"/cards/").concat(e),{headers:this._headers,method:"DELETE"}).then((e=>this._processResponse(e)))}addLike(e){return fetch("".concat(this._baseURL,"cards/likes/").concat(e),{headers:this._headers,method:"PUT"}).then((e=>this._processResponse(e)))}removeLike(e){return fetch("".concat(this._baseURL,"cards/likes/").concat(e),{headers:this._headers,method:"DELETE"}).then((e=>this._processResponse(e)))}changeAvatar(e){return fetch("".concat(this._baseURL,"users/me/avatar"),{headers:this._headers,method:"PATCH",body:JSON.stringify({avatar:e})}).then((e=>this._processResponse(e)))}getInitialData(){return Promise.all([h.getUserInfo(),h.getInitialCards()])}}({baseURL:"https://around.nomoreparties.co/v1/cohort-3-en/",headers:{authorization:"".concat("a71d10a8-c3e4-4a43-bbbc-db81e488ab20"),"Content-Type":"application/json"}}),l=new class{constructor(e){let{renderer:t,selector:s}=e;this._renderer=t,this._container=document.querySelector(s)}addItem(e){const t=this._renderer(e);this._container.prepend(t)}_clear(){this._container.innerHTML=""}renderAll(e){this._clear(),this._renderItems=e,this._renderItems.forEach((e=>{this.addItem(e)}))}}({renderer:e=>function(e){const s=new class{constructor(e,t){let{data:s,handleImg:i,handleDel:n,handleLike:r}=e;this._name=s.name,this._src=s.link,this._likesCount=s.likes.length,this._id=s._id,this.ownerId=s.owner._id,this._selector=t,this._hanldeImgClick=i,this._handleDel=n,this._handleLikeBtn=r}_getTemplate(){const e=document.querySelector("".concat(this._selector)).content.cloneNode(!0);return this._img=e.querySelector(".card__img"),this._caption=e.querySelector(".card__caption"),this._trash=e.querySelector(".card__trash"),this._like=e.querySelector(".card__like-btn"),this._likes=e.querySelector(".card__like-counter"),e}makeCard(){return this._element=this._getTemplate().querySelector(".card"),this._img.setAttribute("src",this._src),this._img.setAttribute("alt",this._name),this._caption.textContent=this._name,this._likes.textContent=this._likesCount,this._addListeners(),t.self!=this.ownerId&&(this._trash.classList.add("trash_display-none"),this._trash.setAttribute("disabled","")),this._element.setAttribute("id",this._id),this._element}_addListeners(){this._like.addEventListener("click",(()=>this._handleLikeBtn())),this._img.addEventListener("click",(()=>this._hanldeImgClick({name:this._name,src:this._src}))),this._trash.addEventListener("click",(()=>this._handleDel(this._id)))}updateLikes(e){this._likesCount=e,this._renderLikes()}_isLiked(){return!(1==this._like.classList.length)}_renderLikes(){this._likes.textContent=this._likesCount,this._like.classList.toggle("card__like-btn_active")}remove(){this._element.remove()}}({data:e,handleImg:e=>{c.open(e)},handleDel:e=>{m.open(),m.setAction((()=>{h.deleteCard(e).then(s.remove()).catch((e=>console.log(e)))}))},handleLike:()=>{s._isLiked()?h.removeLike(s._id).then((e=>s.updateLikes(e.likes.length))).catch(console.error):h.addLike(s._id).then((e=>s.updateLikes(e.likes.length))).catch(console.error)}},"#card");return s.makeCard()}(e),selector:".gallery"}),c=new class extends o{constructor(e){super(e),this._image=this._modal.querySelector(".img-popout__img"),this._caption=this._modal.querySelector(".img-popout__caption")}open(e){this._image.src=e.src,this._image.alt=e.name,this._caption.textContent=e.name,super.open()}}("#imgPopup");c.setEventListeners();const d=new a({selector:"#avatar",handleSubmit:e=>{e=e.imageLink,d.showLoading(),h.changeAvatar(e).then((e=>{p.setUserInfo(e),d.close()})).catch((e=>console.log(e))).finally(d.hideLoading())},loadingBtnText:"Saving..."});d.setEventListeners();const _=new a({selector:"#profilePopup",handleSubmit:e=>{_.showLoading(),h.patchUserInfo(e).then((e=>{p.setUserInfo(e),_.close()})).catch((e=>console.log(e))).finally(_.hideLoading())},loadingBtnText:"Saving..."});_.setEventListeners();const u=new a({selector:"#addCardPopup",handleSubmit:e=>{u.showLoading(),h.postNewCard({name:e.title,link:e.imgLink}).then((e=>{l.addItem(e),u.close()})).catch((e=>console.log(e))).finally(u.hideLoading())},loadingBtnText:"Saving..."});u.setEventListeners();const m=new class extends o{setAction(e){this._handleSubmit=e}setEventListeners(){this._modal.querySelector(".popup-edit__submit").addEventListener("mouseup",(e=>{this._handleSubmit(e),this.close()})),super.setEventListeners()}}("#cardDelete");m.setEventListeners();const p=new class{constructor(e){this._nameSelector=e.nameSelector,this._jobSelector=e.jobSelector,this._nameNode=document.querySelector("".concat(this._nameSelector)),this._jobNode=document.querySelector("".concat(this._jobSelector)),this._pictureNode=document.querySelector(".profile__picture"),this.id=e._id,this._avatar=e.avatar}getUserInfo(){return this._name=this._nameNode.textContent,this._job=this._jobNode.textContent,{name:this._name,about:this._job}}setUserInfo(e){this._nameNode.textContent=e.name,this._jobNode.textContent=e.about,this.id=e._id,this.setUserAvatar(e.avatar)}getUserAvatar(){return this._avatar}setUserAvatar(e){this._pictureNode.src=e}}({nameSelector:".profile__user-name",jobSelector:".profile__user-about"}),g={};var b;b={formSelector:".popup-edit",inputSelector:".popup-edit__field",submitButtonSelector:".popup-edit__submit",inactiveButtonClass:"",inputErrorClass:"popup-edit__field_error",errorClass:"popup-edit__error-msg-inactive"},Array.from(document.querySelectorAll(b.formSelector)).forEach((t=>{const s=new class{constructor(t,s){e(this,"_hideOrShowError",(e=>{e.validity.valid?this._hideInputError(e):this._showInputError(e,e.validationMessage)})),e(this,"_showInputError",((e,t)=>{const s=this._formElement.querySelector("#".concat(e.getAttribute("name")));e.classList.add(this._settings.inputErrorClass),s.textContent=t,s.classList.remove(this._settings.errorClass)})),e(this,"_hideInputError",(e=>{const t=this._formElement.querySelector("#".concat(e.getAttribute("name")));e.classList.remove(this._settings.inputErrorClass),t.classList.add(this._settings.errorClass),t.textContent=""})),e(this,"_hasInvalidInput",(e=>e.some((e=>!e.validity.valid)))),this._settings=t,this._formElement=s,this._inputList=Array.from(this._formElement.querySelectorAll(this._settings.inputSelector)),this._btnElement=this._formElement.querySelector(this._settings.submitButtonSelector)}resetValidation(){this._toggleBtnState(),this._inputList.forEach((e=>{this._hideInputError(e)}))}enableValidation(){this._toggleBtnState(),this.resetValidation(),this._inputList.forEach((e=>{e.addEventListener("input",(()=>{this._hideOrShowError(e),this._toggleBtnState()}))}))}_toggleBtnState(){this._hasInvalidInput(this._inputList)?this._btnElement.setAttribute("disabled",""):this._btnElement.removeAttribute("disabled","")}}(b,t),i=t.getAttribute("name");g[i]=s,s.enableValidation()})),h.getInitialData().then((e=>{let[s,i]=e;p.setUserInfo(s),t.self=s._id,l.renderAll(i)})),n.addEventListener("click",(function(){d.open()})),s.addEventListener("click",(function(){const e=p.getUserInfo();_.open(e),g.editProfileForm.resetValidation()})),i.addEventListener("click",(function(){g.addCardForm.resetValidation(),u.open()}))}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,