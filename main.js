!function(){"use strict";function e(e,t,s){return t in e?Object.defineProperty(e,t,{value:s,enumerable:!0,configurable:!0,writable:!0}):e[t]=s,e}const t="popup_active";class s{constructor(e){this._selector=e,this._modal=document.querySelector("".concat(this._selector)),this._handleEscKey=this._handleEscKey.bind(this),this._handleClosePopup=this._handleClosePopup.bind(this)}_handleEscKey(e){"Escape"===e.key&&this.close()}setEventListeners(){this._modal.addEventListener("mouseup",this._handleClosePopup)}_handleClosePopup(e){e.target.classList.contains(t)&&this.close(),e.target.classList.contains("popup__container-close")&&this.close()}open(){document.addEventListener("keyup",this._handleEscKey),this._modal.classList.add(t)}close(){document.removeEventListener("keyup",this._handleEscKey),this._modal.classList.remove(t)}}class i extends s{constructor(e){let{selector:t,handleSubmit:s,loadingBtnText:i}=e;super(t),this._handleSubmit=s,this._handleSubmit=this._handleSubmit.bind(this),this._handlerWithForm=this._handlerWithForm.bind(this),this._form=this._modal.querySelector(".popup__form"),this._inputFields=[...this._form.querySelectorAll(".popup__form-field")],this._submitBtn=this._modal.querySelector(".popup__form-submit"),this._btnInitText=this._submitBtn.textContent,this._loadingBtnText=i}_getInputValues(){const e={};return this._inputFields.forEach((t=>{e[t.id]=t.value})),e}open(e){e&&this._setInputValues(e),super.open()}_setInputValues(e){this._inputFields.forEach((t=>{Object.keys(e).forEach((s=>{t.id===s&&(t.value=e[s])}))}))}_handlerWithForm(e){e.preventDefault(),this._handleSubmit(this._getInputValues())}showLoading(){this._submitBtn.textContent=this._loadingBtnText}hideLoading(){this._submitBtn.textContent=this._btnInitText}setEventListeners(){this._form.addEventListener("submit",this._handlerWithForm),super.setEventListeners()}close(){super.close(),setTimeout((()=>this._form.reset()),500)}}const n=document.querySelector(".profile__edit-button"),r=document.querySelector(".profile__add-btn"),o=document.querySelector(".profile__picture-button"),a=new class{constructor(e){let{baseURL:t,headers:s}=e;var i,n;n=e=>e.ok?e.json():Promise.reject("Error: ".concat(e.statusText)),(i="_processResponse")in this?Object.defineProperty(this,i,{value:n,enumerable:!0,configurable:!0,writable:!0}):this[i]=n,this._baseURL=t,this._headers=s}getUserInfo(){return fetch("".concat(this._baseURL,"/users/me"),{headers:this._headers}).then(this._processResponse)}getInitialCards(){return fetch("".concat(this._baseURL,"/cards"),{headers:this._headers}).then((e=>this._processResponse(e)))}patchUserInfo(e){return fetch("".concat(this._baseURL,"users/me"),{headers:this._headers,method:"PATCH",body:JSON.stringify(e)}).then((e=>this._processResponse(e)))}postNewCard(e){return fetch("".concat(this._baseURL,"/cards"),{headers:this._headers,method:"POST",body:JSON.stringify(e)}).then((e=>this._processResponse(e)))}deleteCard(e){return fetch("".concat(this._baseURL,"/cards/").concat(e),{headers:this._headers,method:"DELETE"}).then((e=>this._processResponse(e)))}addLike(e){return fetch("".concat(this._baseURL,"cards/likes/").concat(e),{headers:this._headers,method:"PUT"}).then((e=>this._processResponse(e)))}removeLike(e){return fetch("".concat(this._baseURL,"cards/likes/").concat(e),{headers:this._headers,method:"DELETE"}).then((e=>this._processResponse(e)))}changeAvatar(e){return fetch("".concat(this._baseURL,"users/me/avatar"),{headers:this._headers,method:"PATCH",body:JSON.stringify({avatar:e})}).then((e=>this._processResponse(e)))}getInitialData(){return Promise.all([a.getUserInfo(),a.getInitialCards()])}}({baseURL:"https://around.nomoreparties.co/v1/cohort-3-en/",headers:{authorization:"".concat("a71d10a8-c3e4-4a43-bbbc-db81e488ab20"),"Content-Type":"application/json"}}),h=new class{constructor(e){let{renderer:t,selector:s}=e;this._renderer=t,this._container=document.querySelector(s)}addItem(e){const t=this._renderer(e);this._container.prepend(t)}_clear(){this._container.innerHTML=""}renderAll(e){this._clear(),e.forEach((e=>{this.addItem(e)}))}}({renderer:function(e){const t=new class{constructor(e,t){let{data:s,handleImg:i,handleDel:n,handleLike:r,userId:o}=e;this._name=s.name,this._src=s.link,this._likesArr=s.likes,this._id=s._id,this.ownerId=s.owner._id,this._selector=t,this._hanldeImgClick=i,this._handleDel=n,this._handleLikeBtn=r,this._userId=o}_getTemplate(){return document.querySelector("".concat(this._selector)).content.cloneNode(!0)}makeCard(){return this._element=this._getTemplate().querySelector(".card"),this._img=this._element.querySelector(".card__img"),this._caption=this._element.querySelector(".card__caption"),this._trash=this._element.querySelector(".card__trash"),this._like=this._element.querySelector(".card__like-btn"),this._likes=this._element.querySelector(".card__like-counter"),this._img.setAttribute("src",this._src),this._img.setAttribute("alt",this._name),this._caption.textContent=this._name,this._updateLikes(this._likesArr),this._addListeners(),this._userId!=this.ownerId&&(this._trash.classList.add("trash_display-none"),this._trash.setAttribute("disabled","")),this._element.setAttribute("id",this._id),this._element}_addListeners(){this._like.addEventListener("click",(()=>this._handleLikeBtn())),this._img.addEventListener("click",(()=>this._hanldeImgClick({name:this._name,src:this._src}))),this._trash.addEventListener("click",(()=>this._handleDel(this._id)))}_updateLikes(e){this._likesArr=e,this._likesCount=e.length,this._renderLikes()}_isLiked(){return this._likesArr.some((e=>e._id===this._userId))}_renderLikes(){this._likes.textContent=this._likesCount,this._isLiked()?this._like.classList.add("card__like-btn_active"):this._like.classList.remove("card__like-btn_active")}remove(){this._element.remove(),this._element=null}}({data:e,userId:m.getUserId(),handleImg:e=>{l.open(e)},handleDel:e=>{u.open(),u.setAction((()=>{u.showLoading(),a.deleteCard(e).then((()=>{t.remove(),u.close()})).catch((e=>console.log(e))).finally((()=>u.hideLoading()))}))},handleLike:()=>{t._isLiked()?a.removeLike(t._id).then((e=>{t._updateLikes(e.likes)})).catch(console.error):a.addLike(t._id).then((e=>{t._updateLikes(e.likes)})).catch(console.error)}},"#card");return t.makeCard()},selector:".gallery"}),l=new class extends s{constructor(e){super(e),this._image=this._modal.querySelector(".img-popout__img"),this._caption=this._modal.querySelector(".img-popout__caption")}open(e){this._image.src=e.src,this._image.alt=e.name,this._caption.textContent=e.name,super.open()}}("#imgPopup");l.setEventListeners();const c=new i({selector:"#avatar",handleSubmit:e=>{c.showLoading(),a.changeAvatar(e.avatarLink).then((e=>{m.setUserInfo(e),c.close()})).catch((e=>console.log(e))).finally((()=>c.hideLoading()))},loadingBtnText:"Saving..."});c.setEventListeners();const d=new i({selector:"#profilePopup",handleSubmit:e=>{d.showLoading(),a.patchUserInfo(e).then((e=>{m.setUserInfo(e),d.close()})).catch((e=>console.log(e))).finally((()=>d.hideLoading()))},loadingBtnText:"Saving..."});d.setEventListeners();const _=new i({selector:"#addCardPopup",handleSubmit:e=>{_.showLoading(),a.postNewCard({name:e.title,link:e.imgLink}).then((e=>{h.addItem(e),_.close()})).catch((e=>console.log(e))).finally((()=>addCard.hideLoading()))},loadingBtnText:"Saving..."});_.setEventListeners();const u=new class extends s{constructor(e){let{selector:t,loadingBtnText:s}=e;super(t),this._submitBtn=this._modal.querySelector(".popup__form-submit"),this._btnInitText=this._submitBtn.textContent,this._loadingBtnText=s}setAction(e){this._handleSubmit=e}showLoading(){this._submitBtn.textContent=this._loadingBtnText}hideLoading(){this._submitBtn.textContent=this._btnInitText}setEventListeners(){this._modal.querySelector(".popup__form-submit").addEventListener("mouseup",(e=>{this._handleSubmit(e)})),super.setEventListeners()}}({selector:"#cardDelete",loadingBtnText:"Deleting..."});u.setEventListeners();const m=new class{constructor(e){this._nameSelector=e.nameSelector,this._jobSelector=e.jobSelector,this._nameNode=document.querySelector("".concat(this._nameSelector)),this._jobNode=document.querySelector("".concat(this._jobSelector)),this._pictureNode=document.querySelector(".profile__picture")}getUserInfo(){return this._name=this._nameNode.textContent,this._job=this._jobNode.textContent,{name:this._name,about:this._job}}setUserInfo(e){this._nameNode.textContent=e.name,this._jobNode.textContent=e.about}setUserAvatar(e){this._pictureNode.src=e}getUserId(){return this._id}setUserId(e){this._id=e}}({nameSelector:".profile__user-name",jobSelector:".profile__user-about"}),p={};var b;b={formSelector:".popup__form",inputSelector:".popup__form-field",submitButtonSelector:".popup__form-submit",inactiveButtonClass:"",inputErrorClass:"popup__form-field_error",errorClass:"popup__form-error-msg_inactive"},Array.from(document.querySelectorAll(b.formSelector)).forEach((t=>{const s=new class{constructor(t,s){e(this,"_hideOrShowError",(e=>{e.validity.valid?this._hideInputError(e):this._showInputError(e,e.validationMessage)})),e(this,"_showInputError",((e,t)=>{const s=this._formElement.querySelector("#".concat(e.getAttribute("name")));e.classList.add(this._settings.inputErrorClass),s.textContent=t,s.classList.remove(this._settings.errorClass)})),e(this,"_hideInputError",(e=>{const t=this._formElement.querySelector("#".concat(e.getAttribute("name")));e.classList.remove(this._settings.inputErrorClass),t.classList.add(this._settings.errorClass),t.textContent=""})),e(this,"_hasInvalidInput",(e=>e.some((e=>!e.validity.valid)))),this._settings=t,this._formElement=s,this._inputList=Array.from(this._formElement.querySelectorAll(this._settings.inputSelector)),this._btnElement=this._formElement.querySelector(this._settings.submitButtonSelector)}resetValidation(){this._toggleBtnState(),this._inputList.forEach((e=>{this._hideInputError(e)}))}enableValidation(){this._toggleBtnState(),this.resetValidation(),this._inputList.forEach((e=>{e.addEventListener("input",(()=>{this._hideOrShowError(e),this._toggleBtnState()}))}))}_toggleBtnState(){this._hasInvalidInput(this._inputList)?this._btnElement.setAttribute("disabled",!0):this._btnElement.removeAttribute("disabled")}}(b,t),i=t.getAttribute("name");p[i]=s,s.enableValidation()})),a.getInitialData().then((e=>{let[t,s]=e;m.setUserInfo(t),m.setUserAvatar(t.avatar),m.setUserId(t._id),h.renderAll(s)})),o.addEventListener("click",(function(){c.open()})),n.addEventListener("click",(function(){const e=m.getUserInfo();d.open(e),p.editProfileForm.resetValidation()})),r.addEventListener("click",(function(){p.addCardForm.resetValidation(),_.open()}))}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,